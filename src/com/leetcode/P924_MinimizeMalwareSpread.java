package com.leetcode;

import java.util.*;

public class P924_MinimizeMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {

        int n = graph.length;
        int[] father = new int[n];
        Arrays.fill(father, -1);


        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (graph[i][j] == 0) continue;
                int fi = getFather(father, i);
                int fj = getFather(father, j);
                father[fi] = fj;
            }
        }

        Map<Integer, Set<Integer>> sonsMap = new HashMap<>();
        for (int i = 0; i < n; i++) sonsMap.computeIfAbsent(getFather(father, i), k -> new HashSet<>()).add(i);

        Arrays.sort(initial);

        int ans = initial[0];
        int number = 0;

        for (int i = 0; i < initial.length; i++) {
            int x = initial[i];
            int fx = getFather(father, x);

            Set<Integer> sameSet = sonsMap.computeIfAbsent(fx, k -> new HashSet<>());
            int cnt = 0;
            for (int z : initial) {
                if (sameSet.contains(z)) cnt++;
            }
            if (cnt == 1 && number < sameSet.size()) {
                ans = x;
                number = sameSet.size();
            }
        }


        return ans;
    }

    private int getFather(int[] father, int x) {
        if (father[x] == -1) father[x] = x;

        int now = x;
        while (now != father[now]) {
            now = father[now];
        }
        return father[x] = now;
    }


    public static void main(String[] args) {
        System.out.println(new P924_MinimizeMalwareSpread().minMalwareSpread(new int[][]{
                {1, 1, 0},
                {1, 1, 0},
                {0, 0, 1}
        }, new int[]{0, 1}));
    }

}
